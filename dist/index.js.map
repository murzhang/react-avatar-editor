{"version":3,"file":"index.js","sources":["../src/utils/parse-dom.js","../src/utils/retrieve-image-url.js","../src/index.js"],"sourcesContent":["/* global DOMParser:false */\n\n/*\n * This method uses DOMParser to parse an HTML string into\n * a document.  By using this approach we avoid the potential\n * for XSS attacks on consumers of this component, which would\n * be created by parsing the string via a detached DOM fragment,\n * as in this latter case script in onload attributes will be\n * run in the context of the host page.\n *\n * The drawback to this approach is that browser support is not\n * as wide - IE10 and up along with evergreen browsers.\n */\nconst parseDOM = (str) => {\n  const parser = typeof DOMParser === 'undefined' ? null : new DOMParser()\n\n  if (!parser) {\n    return null\n  }\n\n  return parser.parseFromString(str, 'text/html')\n}\n\nexport default parseDOM\n","import parseDOM from './parse-dom'\n\n/*\n * Retrieves image URL from collection of data transfer\n * items, if one is present.  As the item will contain\n * an HTML string containing an img element, it's\n * necessary to parse the HTML and then pull the src\n * attribute off the image.\n */\nconst retrieveImageURL = (dataTransferItems, callback) => {\n  for (let i = 0; i < dataTransferItems.length; i++) {\n    let item = dataTransferItems[i]\n\n    if (item.type === 'text/html') {\n      item.getAsString(value => {\n        const doc = parseDOM(value)\n        const img = doc.querySelector('img')\n        if (img && img.src) {\n          callback(img.src)\n        }\n      })\n      break\n    }\n  }\n}\n\nexport default retrieveImageURL\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport retrieveImageUrl from './utils/retrieve-image-url'\n\nconst isTouchDevice = !!(\n  typeof window !== 'undefined' &&\n  typeof navigator !== 'undefined' &&\n  ('ontouchstart' in window || navigator.msMaxTouchPoints > 0)\n)\n\nconst isFileAPISupported = typeof File !== 'undefined'\n\nconst draggableEvents = {\n  touch: {\n    react: {\n      down: 'onTouchStart',\n      mouseDown: 'onMouseDown',\n      drag: 'onTouchMove',\n      drop: 'onTouchEnd',\n      move: 'onTouchMove',\n      mouseMove: 'onMouseMove',\n      up: 'onTouchEnd',\n      mouseUp: 'onMouseUp'\n    },\n    native: {\n      down: 'touchstart',\n      mouseDown: 'mousedown',\n      drag: 'touchmove',\n      drop: 'touchend',\n      move: 'touchmove',\n      mouseMove: 'mousemove',\n      up: 'touchend',\n      mouseUp: 'mouseup'\n    }\n  },\n  desktop: {\n    react: {\n      down: 'onMouseDown',\n      drag: 'onDragOver',\n      drop: 'onDrop',\n      move: 'onMouseMove',\n      up: 'onMouseUp'\n    },\n    native: {\n      down: 'mousedown',\n      drag: 'dragStart',\n      drop: 'drop',\n      move: 'mousemove',\n      up: 'mouseup'\n    }\n  }\n}\nconst deviceEvents = isTouchDevice\n  ? draggableEvents.touch\n  : draggableEvents.desktop\n\nconst pixelRatio =\n  typeof window !== 'undefined' && window.devicePixelRatio\n    ? window.devicePixelRatio\n    : 1\n\n// Draws a rounded rectangle on a 2D context.\nconst drawRoundedRect = (context, x, y, width, height, borderRadius) => {\n  if (borderRadius === 0) {\n    context.rect(x, y, width, height)\n  } else {\n    const widthMinusRad = width - borderRadius\n    const heightMinusRad = height - borderRadius\n    context.translate(x, y)\n    context.arc(\n      borderRadius,\n      borderRadius,\n      borderRadius,\n      Math.PI,\n      Math.PI * 1.5\n    )\n    context.lineTo(widthMinusRad, 0)\n    context.arc(\n      widthMinusRad,\n      borderRadius,\n      borderRadius,\n      Math.PI * 1.5,\n      Math.PI * 2\n    )\n    context.lineTo(width, heightMinusRad)\n    context.arc(\n      widthMinusRad,\n      heightMinusRad,\n      borderRadius,\n      Math.PI * 2,\n      Math.PI * 0.5\n    )\n    context.lineTo(borderRadius, height)\n    context.arc(\n      borderRadius,\n      heightMinusRad,\n      borderRadius,\n      Math.PI * 0.5,\n      Math.PI\n    )\n    context.translate(-x, -y)\n  }\n}\n\nclass AvatarEditor extends React.Component {\n  static propTypes = {\n    scale: PropTypes.number,\n    rotate: PropTypes.number,\n    image: PropTypes.oneOfType([\n      PropTypes.string,\n      ...(isFileAPISupported ? [PropTypes.instanceOf(File)] : [])\n    ]),\n    border: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.arrayOf(PropTypes.number)\n    ]),\n    borderRadius: PropTypes.number,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    position: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number\n    }),\n    color: PropTypes.arrayOf(PropTypes.number),\n    style: PropTypes.object,\n    crossOrigin: PropTypes.oneOf(['', 'anonymous', 'use-credentials']),\n\n    onDropFile: PropTypes.func,\n    onLoadFailure: PropTypes.func,\n    onLoadSuccess: PropTypes.func,\n    onImageReady: PropTypes.func,\n    onImageChange: PropTypes.func,\n    onMouseUp: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onPositionChange: PropTypes.func,\n\n    disableDrop: PropTypes.bool\n  }\n\n  static defaultProps = {\n    disableDrop: false,\n    scale: 1,\n    rotate: 0,\n    border: 25,\n    borderRadius: 0,\n    width: 200,\n    height: 200,\n    color: [0, 0, 0, 0.5],\n    style: {},\n    onDropFile () {},\n    onLoadFailure () {},\n    onLoadSuccess () {},\n    onImageReady () {},\n    onImageChange () {},\n    onMouseUp () {},\n    onMouseMove () {},\n    onPositionChange () {}\n  }\n\n  constructor (props) {\n    super(props)\n\n    this.setCanvas = ::this.setCanvas\n    this.handleMouseMove = ::this.handleMouseMove\n    this.handleMouseDown = ::this.handleMouseDown\n    this.handleMouseUp = ::this.handleMouseUp\n    this.handleDragOver = ::this.handleDragOver\n    this.handleDrop = ::this.handleDrop\n  }\n\n  state = {\n    drag: false,\n    my: null,\n    mx: null,\n    image: {\n      x: 0.5,\n      y: 0.5\n    }\n  }\n\n  isVertical () {\n    return this.props.rotate % 180 !== 0\n  }\n\n  getBorders (border = this.props.border) {\n    return Array.isArray(border) ? border : [border, border]\n  }\n\n  getDimensions () {\n    const { width, height, rotate, border } = this.props\n\n    const canvas = {}\n\n    const [borderX, borderY] = this.getBorders(border)\n\n    const canvasWidth = width\n    const canvasHeight = height\n\n    if (this.isVertical()) {\n      canvas.width = canvasHeight\n      canvas.height = canvasWidth\n    } else {\n      canvas.width = canvasWidth\n      canvas.height = canvasHeight\n    }\n\n    canvas.width += borderX * 2\n    canvas.height += borderY * 2\n\n    return {\n      canvas,\n      rotate,\n      width,\n      height,\n      border\n    }\n  }\n\n  getImage () {\n    // get relative coordinates (0 to 1)\n    const cropRect = this.getCroppingRect()\n    const image = this.state.image\n\n    // get actual pixel coordinates\n    cropRect.x *= image.resource.width\n    cropRect.y *= image.resource.height\n    cropRect.width *= image.resource.width\n    cropRect.height *= image.resource.height\n\n    // create a canvas with the correct dimensions\n    const canvas = document.createElement('canvas')\n\n    if (this.isVertical()) {\n      canvas.width = cropRect.height\n      canvas.height = cropRect.width\n    } else {\n      canvas.width = cropRect.width\n      canvas.height = cropRect.height\n    }\n\n    // draw the full-size image at the correct position,\n    // the image gets truncated to the size of the canvas.\n    const context = canvas.getContext('2d')\n\n    context.translate(canvas.width / 2, canvas.height / 2)\n    context.rotate(this.props.rotate * Math.PI / 180)\n    context.translate(-(canvas.width / 2), -(canvas.height / 2))\n\n    if (this.isVertical()) {\n      context.translate(\n        (canvas.width - canvas.height) / 2,\n        (canvas.height - canvas.width) / 2\n      )\n    }\n\n    context.drawImage(image.resource, -cropRect.x, -cropRect.y)\n\n    return canvas\n  }\n\n  /**\n   * Get the image scaled to original canvas size.\n   * This was default in 4.x and is now kept as a legacy method.\n   */\n  getImageScaledToCanvas () {\n    const { width, height } = this.getDimensions()\n\n    const canvas = document.createElement('canvas')\n\n    if (this.isVertical()) {\n      canvas.width = height\n      canvas.height = width\n    } else {\n      canvas.width = width\n      canvas.height = height\n    }\n\n    // don't paint a border here, as it is the resulting image\n    this.paintImage(canvas.getContext('2d'), this.state.image, 0, 1)\n\n    return canvas\n  }\n\n  getXScale () {\n    const canvasAspect = this.props.width / this.props.height\n    const imageAspect = this.state.image.width / this.state.image.height\n\n    return Math.min(1, canvasAspect / imageAspect)\n  }\n\n  getYScale () {\n    const canvasAspect = this.props.height / this.props.width\n    const imageAspect = this.state.image.height / this.state.image.width\n\n    return Math.min(1, canvasAspect / imageAspect)\n  }\n\n  getCroppingRect () {\n    const position = this.props.position || {\n      x: this.state.image.x,\n      y: this.state.image.y\n    }\n    const width = 1 / this.props.scale * this.getXScale()\n    const height = 1 / this.props.scale * this.getYScale()\n\n    const croppingRect = {\n      x: position.x - width / 2,\n      y: position.y - height / 2,\n      width,\n      height\n    }\n\n    let xMin = 0\n    let xMax = 1 - croppingRect.width\n    let yMin = 0\n    let yMax = 1 - croppingRect.height\n\n    // If the cropping rect is larger than the image, then we need to change\n    // our maxima & minima for x & y to allow the image to appear anywhere up\n    // to the very edge of the cropping rect.\n    const isLargerThanImage = width > 1 || height > 1\n\n    if (isLargerThanImage) {\n      xMin = -croppingRect.width\n      xMax = 1\n      yMin = -croppingRect.height\n      yMax = 1\n    }\n\n    return {\n      ...croppingRect,\n      x: Math.max(xMin, Math.min(croppingRect.x, xMax)),\n      y: Math.max(yMin, Math.min(croppingRect.y, yMax))\n    }\n  }\n\n  isDataURL (str) {\n    if (str === null) {\n      return false\n    }\n    const regex = /^\\s*data:([a-z]+\\/[a-z]+(;[a-z-]+=[a-z-]+)?)?(;base64)?,[a-z0-9!$&',()*+;=\\-._~:@/?%\\s]*\\s*$/i\n    return !!str.match(regex)\n  }\n\n  loadImage (image) {\n    if (isFileAPISupported && image instanceof File) {\n      this.loadImageFile(image)\n    } else if (typeof image === 'string') {\n      this.loadImageURL(image)\n    }\n  }\n\n  loadImageURL (imageURL) {\n    const imageObj = new Image()\n    imageObj.onload = this.handleImageReady.bind(this, imageObj)\n    imageObj.onerror = this.props.onLoadFailure\n    if (!this.isDataURL(imageURL) && this.props.crossOrigin) { imageObj.crossOrigin = this.props.crossOrigin }\n    imageObj.src = imageURL\n  }\n\n  loadImageFile (imageFile) {\n    const reader = new FileReader()\n    reader.onload = e => this.loadImageURL(e.target.result)\n    reader.readAsDataURL(imageFile)\n  }\n\n  componentDidMount () {\n    const context = ReactDOM.findDOMNode(this.canvas).getContext('2d')\n    if (this.props.image) {\n      this.loadImage(this.props.image)\n    }\n    this.paint(context)\n    if (document) {\n      const nativeEvents = deviceEvents.native\n      document.addEventListener(nativeEvents.move, this.handleMouseMove, false)\n      document.addEventListener(nativeEvents.up, this.handleMouseUp, false)\n      if (isTouchDevice) {\n        document.addEventListener(\n          nativeEvents.mouseMove,\n          this.handleMouseMove,\n          false\n        )\n        document.addEventListener(\n          nativeEvents.mouseUp,\n          this.handleMouseUp,\n          false\n        )\n      }\n    }\n  }\n\n  componentWillUnmount () {\n    if (document) {\n      const nativeEvents = deviceEvents.native\n      document.removeEventListener(\n        nativeEvents.move,\n        this.handleMouseMove,\n        false\n      )\n      document.removeEventListener(nativeEvents.up, this.handleMouseUp, false)\n      if (isTouchDevice) {\n        document.removeEventListener(\n          nativeEvents.mouseMove,\n          this.handleMouseMove,\n          false\n        )\n        document.removeEventListener(\n          nativeEvents.mouseUp,\n          this.handleMouseUp,\n          false\n        )\n      }\n    }\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    const canvas = ReactDOM.findDOMNode(this.canvas)\n    const context = canvas.getContext('2d')\n    context.clearRect(0, 0, canvas.width, canvas.height)\n    this.paint(context)\n    this.paintImage(context, this.state.image, this.props.border)\n\n    if (\n      prevProps.image !== this.props.image ||\n      prevProps.width !== this.props.width ||\n      prevProps.height !== this.props.height ||\n      prevProps.position !== this.props.position ||\n      prevProps.scale !== this.props.scale ||\n      prevProps.rotate !== this.props.rotate ||\n      prevState.my !== this.state.my ||\n      prevState.mx !== this.state.mx ||\n      prevState.image.x !== this.state.image.x ||\n      prevState.image.y !== this.state.image.y\n    ) {\n      this.props.onImageChange()\n    }\n  }\n\n  handleImageReady (image) {\n    const imageState = this.getInitialSize(image.width, image.height)\n    imageState.resource = image\n    imageState.x = 0.5\n    imageState.y = 0.5\n    this.setState({ drag: false, image: imageState }, this.props.onImageReady)\n    this.props.onLoadSuccess(imageState)\n  }\n\n  getInitialSize (width, height) {\n    let newHeight\n    let newWidth\n\n    const dimensions = this.getDimensions()\n    const canvasRatio = dimensions.height / dimensions.width\n    const imageRatio = height / width\n\n    if (canvasRatio > imageRatio) {\n      newHeight = this.getDimensions().height\n      newWidth = width * (newHeight / height)\n    } else {\n      newWidth = this.getDimensions().width\n      newHeight = height * (newWidth / width)\n    }\n\n    return {\n      height: newHeight,\n      width: newWidth\n    }\n  }\n\n  componentWillReceiveProps (newProps) {\n    if (\n      (newProps.image && this.props.image !== newProps.image) ||\n      this.props.width !== newProps.width ||\n      this.props.height !== newProps.height\n    ) {\n      this.loadImage(newProps.image)\n    }\n  }\n\n  paintImage (context, image, border, scaleFactor = pixelRatio) {\n    if (image.resource) {\n      const position = this.calculatePosition(image, border)\n\n      context.save()\n\n      context.translate(context.canvas.width / 2, context.canvas.height / 2)\n      context.rotate(this.props.rotate * Math.PI / 180)\n      context.translate(\n        -(context.canvas.width / 2),\n        -(context.canvas.height / 2)\n      )\n\n      if (this.isVertical()) {\n        context.translate(\n          (context.canvas.width - context.canvas.height) / 2,\n          (context.canvas.height - context.canvas.width) / 2\n        )\n      }\n\n      context.scale(scaleFactor, scaleFactor)\n\n      context.globalCompositeOperation = 'destination-over'\n      context.drawImage(\n        image.resource,\n        position.x,\n        position.y,\n        position.width,\n        position.height\n      )\n\n      context.restore()\n    }\n  }\n\n  calculatePosition (image, border) {\n    image = image || this.state.image\n\n    const [borderX, borderY] = this.getBorders(border)\n\n    const croppingRect = this.getCroppingRect()\n\n    const width = image.width * this.props.scale\n    const height = image.height * this.props.scale\n\n    let x = -croppingRect.x * width\n    let y = -croppingRect.y * height\n\n    if (this.isVertical()) {\n      x += borderY\n      y += borderX\n    } else {\n      x += borderX\n      y += borderY\n    }\n\n    return {\n      x,\n      y,\n      height,\n      width\n    }\n  }\n\n  paint (context) {\n    context.save()\n    context.scale(pixelRatio, pixelRatio)\n    context.translate(0, 0)\n    context.fillStyle = 'rgba(' + this.props.color.slice(0, 4).join(',') + ')'\n\n    let borderRadius = this.props.borderRadius\n    const dimensions = this.getDimensions()\n    const [borderSizeX, borderSizeY] = this.getBorders(dimensions.border)\n    const height = dimensions.canvas.height\n    const width = dimensions.canvas.width\n\n    // clamp border radius between zero (perfect rectangle) and half the size without borders (perfect circle or \"pill\")\n    borderRadius = Math.max(borderRadius, 0)\n    borderRadius = Math.min(\n      borderRadius,\n      width / 2 - borderSizeX,\n      height / 2 - borderSizeY\n    )\n\n    context.beginPath()\n    // inner rect, possibly rounded\n    drawRoundedRect(\n      context,\n      borderSizeX,\n      borderSizeY,\n      width - borderSizeX * 2,\n      height - borderSizeY * 2,\n      borderRadius\n    )\n    context.rect(width, 0, -width, height) // outer rect, drawn \"counterclockwise\"\n    context.fill('evenodd')\n\n    context.restore()\n  }\n\n  handleMouseDown (e) {\n    e = e || window.event\n    // if e is a touch event, preventDefault keeps\n    // corresponding mouse events from also being fired\n    // later.\n    e.preventDefault()\n    this.setState({\n      drag: true,\n      mx: null,\n      my: null\n    })\n  }\n  handleMouseUp () {\n    if (this.state.drag) {\n      this.setState({ drag: false })\n      this.props.onMouseUp()\n    }\n  }\n\n  handleMouseMove (e) {\n    e = e || window.event\n    if (this.state.drag === false) {\n      return\n    }\n\n    const mousePositionX = e.targetTouches\n      ? e.targetTouches[0].pageX\n      : e.clientX\n    const mousePositionY = e.targetTouches\n      ? e.targetTouches[0].pageY\n      : e.clientY\n\n    const newState = {\n      mx: mousePositionX,\n      my: mousePositionY\n    }\n\n    let rotate = this.props.rotate\n\n    rotate %= 360\n    rotate = rotate < 0 ? rotate + 360 : rotate\n\n    if (this.state.mx && this.state.my) {\n      const mx = this.state.mx - mousePositionX\n      const my = this.state.my - mousePositionY\n\n      const width = this.state.image.width * this.props.scale\n      const height = this.state.image.height * this.props.scale\n\n      let { x: lastX, y: lastY } = this.getCroppingRect()\n\n      lastX *= width\n      lastY *= height\n\n      // helpers to calculate vectors\n      const toRadians = degree => degree * (Math.PI / 180)\n      const cos = Math.cos(toRadians(rotate))\n      const sin = Math.sin(toRadians(rotate))\n\n      const x = lastX + mx * cos + my * sin\n      const y = lastY + -mx * sin + my * cos\n\n      const relativeWidth = 1 / this.props.scale * this.getXScale()\n      const relativeHeight = 1 / this.props.scale * this.getYScale()\n\n      const position = {\n        x: x / width + relativeWidth / 2,\n        y: y / height + relativeHeight / 2\n      }\n\n      this.props.onPositionChange(position)\n\n      newState.image = {\n        ...this.state.image,\n        ...position\n      }\n    }\n\n    this.setState(newState)\n\n    this.props.onMouseMove(e)\n  }\n\n  handleDragOver (e) {\n    e = e || window.event\n    e.preventDefault()\n  }\n\n  handleDrop (e = window.event) {\n    e.stopPropagation()\n    e.preventDefault()\n\n    if (e.dataTransfer) {\n      const { files, items } = e.dataTransfer\n\n      if (files && files.length) {\n        this.props.onDropFile(e)\n        this.loadImageFile(files[0])\n      } else if (items && items.length) {\n        retrieveImageUrl(items, src => this.loadImage(src))\n      }\n    }\n  }\n\n  setCanvas (canvas) {\n    this.canvas = canvas\n  }\n\n  render () {\n    const dimensions = this.getDimensions()\n    const defaultStyle = {\n      width: dimensions.canvas.width,\n      height: dimensions.canvas.height,\n      cursor: this.state.drag ? 'grabbing' : 'grab'\n    }\n\n    const attributes = {\n      width: dimensions.canvas.width * pixelRatio,\n      height: dimensions.canvas.height * pixelRatio,\n      style: {\n        ...defaultStyle,\n        ...this.props.style\n      }\n    }\n\n    attributes[deviceEvents.react.down] = this.handleMouseDown\n    attributes[deviceEvents.react.drag] = this.handleDragOver\n    if (!this.props.disableDrop) { attributes[deviceEvents.react.drop] = this.handleDrop }\n    if (isTouchDevice) { attributes[deviceEvents.react.mouseDown] = this.handleMouseDown }\n\n    return <canvas ref={this.setCanvas} {...attributes} />\n  }\n}\n\nexport default AvatarEditor\n"],"names":["parseDOM","str","parser","DOMParser","parseFromString","retrieveImageURL","dataTransferItems","callback","i","length","item","type","getAsString","img","value","querySelector","src","isTouchDevice","window","navigator","msMaxTouchPoints","isFileAPISupported","File","draggableEvents","deviceEvents","touch","desktop","pixelRatio","devicePixelRatio","drawRoundedRect","context","x","y","width","height","borderRadius","rect","widthMinusRad","heightMinusRad","translate","arc","Math","PI","lineTo","AvatarEditor","props","state","setCanvas","_this","handleMouseMove","handleMouseDown","handleMouseUp","handleDragOver","handleDrop","React","Component","this","rotate","border","Array","isArray","canvas","getBorders","borderX","borderY","canvasWidth","canvasHeight","isVertical","cropRect","getCroppingRect","image","resource","document","createElement","getContext","drawImage","getDimensions","paintImage","canvasAspect","imageAspect","min","position","scale","getXScale","getYScale","croppingRect","xMin","xMax","yMin","yMax","max","regex","match","loadImageFile","loadImageURL","imageURL","imageObj","Image","onload","handleImageReady","bind","onerror","onLoadFailure","isDataURL","crossOrigin","imageFile","reader","FileReader","_this2","e","target","result","readAsDataURL","ReactDOM","findDOMNode","loadImage","paint","nativeEvents","native","addEventListener","move","up","mouseMove","mouseUp","removeEventListener","prevProps","prevState","clearRect","my","mx","onImageChange","imageState","getInitialSize","setState","drag","onImageReady","onLoadSuccess","newHeight","newWidth","dimensions","newProps","scaleFactor","calculatePosition","save","globalCompositeOperation","restore","fillStyle","color","slice","join","borderSizeX","borderSizeY","beginPath","fill","event","preventDefault","onMouseUp","mousePositionX","targetTouches","pageX","clientX","mousePositionY","pageY","clientY","newState","lastX","lastY","toRadians","degree","cos","sin","onPositionChange","onMouseMove","stopPropagation","dataTransfer","files","items","onDropFile","_this3","defaultStyle","attributes","style","react","down","disableDrop","drop","mouseDown","ref","propTypes","PropTypes","number","oneOfType","string","instanceOf","arrayOf","shape","object","oneOf","func","bool","defaultProps"],"mappings":"4/BAaA,IAAMA,EAAW,SAACC,OACVC,EAA8B,oBAAdC,UAA4B,KAAO,IAAIA,iBAExDD,EAIEA,EAAOE,gBAAgBH,EAAK,aAH1B,MCRLI,EAAmB,SAACC,EAAmBC,OACtC,IAAIC,EAAI,EAAGA,EAAIF,EAAkBG,OAAQD,IAAK,KAC7CE,EAAOJ,EAAkBE,MAEX,cAAdE,EAAKC,KAAsB,GACxBC,YAAY,gBAETC,EADMb,EAASc,GACLC,cAAc,OAC1BF,GAAOA,EAAIG,OACJH,EAAIG,+0BCZjBC,IACc,oBAAXC,QACc,oBAAdC,aACN,iBAAkBD,QAAUC,UAAUC,iBAAmB,IAGtDC,EAAqC,oBAATC,KAE5BC,sBAGM,yBACK,mBACL,mBACA,kBACA,wBACK,iBACP,qBACK,0BAGH,uBACK,iBACL,iBACA,gBACA,sBACK,eACP,mBACK,iCAKH,mBACA,kBACA,cACA,iBACF,0BAGE,iBACA,iBACA,YACA,eACF,aAIJC,EAAeP,EACjBM,EAAgBE,MAChBF,EAAgBG,QAEdC,EACc,oBAAXT,QAA0BA,OAAOU,iBACpCV,OAAOU,iBACP,EAGAC,EAAkB,SAACC,EAASC,EAAGC,EAAGC,EAAOC,EAAQC,MAChC,IAAjBA,IACMC,KAAKL,EAAGC,EAAGC,EAAOC,OACrB,KACCG,EAAgBJ,EAAQE,EACxBG,EAAiBJ,EAASC,IACxBI,UAAUR,EAAGC,KACbQ,IACNL,EACAA,EACAA,EACAM,KAAKC,GACK,IAAVD,KAAKC,MAECC,OAAON,EAAe,KACtBG,IACNH,EACAF,EACAA,EACU,IAAVM,KAAKC,GACK,EAAVD,KAAKC,MAECC,OAAOV,EAAOK,KACdE,IACNH,EACAC,EACAH,EACU,EAAVM,KAAKC,GACK,GAAVD,KAAKC,MAECC,OAAOR,EAAcD,KACrBM,IACNL,EACAG,EACAH,EACU,GAAVM,KAAKC,GACLD,KAAKC,MAECH,WAAWR,GAAIC,KAIrBY,yBAuDSC,4EACLA,aAURC,aACQ,KACF,QACA,cAEC,KACA,OAdAC,UAAcC,EAAKD,oBACnBE,gBAAoBD,EAAKC,0BACzBC,gBAAoBF,EAAKE,0BACzBC,cAAkBH,EAAKG,wBACvBC,eAAmBJ,EAAKI,yBACxBC,WAAeL,EAAKK,gCA/DFC,EAAMC,0DA6EtBC,KAAKX,MAAMY,OAAS,KAAQ,2CAGzBC,yDAASF,KAAKX,MAAMa,cACvBC,MAAMC,QAAQF,GAAUA,GAAUA,EAAQA,iDAIPF,KAAKX,MAAvCZ,IAAAA,MAAOC,IAAAA,OAAQuB,IAAAA,OAAQC,IAAAA,OAEzBG,OAEqBL,KAAKM,WAAWJ,YAApCK,OAASC,OAEVC,EAAchC,EACdiC,EAAehC,SAEjBsB,KAAKW,gBACAlC,MAAQiC,IACRhC,OAAS+B,MAEThC,MAAQgC,IACR/B,OAASgC,KAGXjC,OAAmB,EAAV8B,IACT7B,QAAoB,EAAV8B,uFAaXI,EAAWZ,KAAKa,kBAChBC,EAAQd,KAAKV,MAAMwB,QAGhBvC,GAAKuC,EAAMC,SAAStC,QACpBD,GAAKsC,EAAMC,SAASrC,SACpBD,OAASqC,EAAMC,SAAStC,QACxBC,QAAUoC,EAAMC,SAASrC,WAG5B2B,EAASW,SAASC,cAAc,UAElCjB,KAAKW,gBACAlC,MAAQmC,EAASlC,SACjBA,OAASkC,EAASnC,UAElBA,MAAQmC,EAASnC,QACjBC,OAASkC,EAASlC,YAKrBJ,EAAU+B,EAAOa,WAAW,eAE1BnC,UAAUsB,EAAO5B,MAAQ,EAAG4B,EAAO3B,OAAS,KAC5CuB,OAAOD,KAAKX,MAAMY,OAAShB,KAAKC,GAAK,OACrCH,WAAYsB,EAAO5B,MAAQ,GAAM4B,EAAO3B,OAAS,GAErDsB,KAAKW,gBACC5B,WACLsB,EAAO5B,MAAQ4B,EAAO3B,QAAU,GAChC2B,EAAO3B,OAAS2B,EAAO5B,OAAS,KAI7B0C,UAAUL,EAAMC,UAAWH,EAASrC,GAAIqC,EAASpC,GAElD6B,yDAQmBL,KAAKoB,gBAAvB3C,IAAAA,MAAOC,IAAAA,OAET2B,EAASW,SAASC,cAAc,iBAElCjB,KAAKW,gBACAlC,MAAQC,IACRA,OAASD,MAETA,MAAQA,IACRC,OAASA,QAIb2C,WAAWhB,EAAOa,WAAW,MAAOlB,KAAKV,MAAMwB,MAAO,EAAG,GAEvDT,0CAIDiB,EAAetB,KAAKX,MAAMZ,MAAQuB,KAAKX,MAAMX,OAC7C6C,EAAcvB,KAAKV,MAAMwB,MAAMrC,MAAQuB,KAAKV,MAAMwB,MAAMpC,cAEvDO,KAAKuC,IAAI,EAAGF,EAAeC,2CAI5BD,EAAetB,KAAKX,MAAMX,OAASsB,KAAKX,MAAMZ,MAC9C8C,EAAcvB,KAAKV,MAAMwB,MAAMpC,OAASsB,KAAKV,MAAMwB,MAAMrC,aAExDQ,KAAKuC,IAAI,EAAGF,EAAeC,iDAI5BE,EAAWzB,KAAKX,MAAMoC,aACvBzB,KAAKV,MAAMwB,MAAMvC,IACjByB,KAAKV,MAAMwB,MAAMtC,GAEhBC,EAAQ,EAAIuB,KAAKX,MAAMqC,MAAQ1B,KAAK2B,YACpCjD,EAAS,EAAIsB,KAAKX,MAAMqC,MAAQ1B,KAAK4B,YAErCC,KACDJ,EAASlD,EAAIE,EAAQ,IACrBgD,EAASjD,EAAIE,EAAS,oBAKvBoD,EAAO,EACPC,EAAO,EAAIF,EAAapD,MACxBuD,EAAO,EACPC,EAAO,EAAIJ,EAAanD,cAKFD,EAAQ,GAAKC,EAAS,QAGtCmD,EAAapD,QACd,KACCoD,EAAanD,SACd,QAIJmD,KACA5C,KAAKiD,IAAIJ,EAAM7C,KAAKuC,IAAIK,EAAatD,EAAGwD,MACxC9C,KAAKiD,IAAIF,EAAM/C,KAAKuC,IAAIK,EAAarD,EAAGyD,wCAIpCxF,MACG,OAARA,SACK,MAEH0F,EAAQ,wGACL1F,EAAI2F,MAAMD,qCAGVrB,GACLjD,GAAsBiD,aAAiBhD,UACpCuE,cAAcvB,GACO,iBAAVA,QACXwB,aAAaxB,wCAIRyB,OACNC,EAAW,IAAIC,QACZC,OAAS1C,KAAK2C,iBAAiBC,KAAK5C,KAAMwC,KAC1CK,QAAU7C,KAAKX,MAAMyD,eACzB9C,KAAK+C,UAAUR,IAAavC,KAAKX,MAAM2D,gBAAwBA,YAAchD,KAAKX,MAAM2D,eACpFxF,IAAM+E,wCAGFU,cACPC,EAAS,IAAIC,aACZT,OAAS,mBAAKU,EAAKd,aAAae,EAAEC,OAAOC,WACzCC,cAAcP,mDAIf3E,EAAUmF,EAASC,YAAY1D,KAAKK,QAAQa,WAAW,SACzDlB,KAAKX,MAAMyB,YACR6C,UAAU3D,KAAKX,MAAMyB,YAEvB8C,MAAMtF,GACP0C,SAAU,KACN6C,EAAe7F,EAAa8F,gBACzBC,iBAAiBF,EAAaG,KAAMhE,KAAKP,iBAAiB,YAC1DsE,iBAAiBF,EAAaI,GAAIjE,KAAKL,eAAe,GAC3DlC,aACOsG,iBACPF,EAAaK,UACblE,KAAKP,iBACL,YAEOsE,iBACPF,EAAaM,QACbnE,KAAKL,eACL,uDAOFqB,SAAU,KACN6C,EAAe7F,EAAa8F,gBACzBM,oBACPP,EAAaG,KACbhE,KAAKP,iBACL,YAEO2E,oBAAoBP,EAAaI,GAAIjE,KAAKL,eAAe,GAC9DlC,aACO2G,oBACPP,EAAaK,UACblE,KAAKP,iBACL,YAEO2E,oBACPP,EAAaM,QACbnE,KAAKL,eACL,gDAMY0E,EAAWC,OACvBjE,EAASoD,EAASC,YAAY1D,KAAKK,QACnC/B,EAAU+B,EAAOa,WAAW,QAC1BqD,UAAU,EAAG,EAAGlE,EAAO5B,MAAO4B,EAAO3B,aACxCkF,MAAMtF,QACN+C,WAAW/C,EAAS0B,KAAKV,MAAMwB,MAAOd,KAAKX,MAAMa,QAGpDmE,EAAUvD,QAAUd,KAAKX,MAAMyB,OAC/BuD,EAAU5F,QAAUuB,KAAKX,MAAMZ,OAC/B4F,EAAU3F,SAAWsB,KAAKX,MAAMX,QAChC2F,EAAU5C,WAAazB,KAAKX,MAAMoC,UAClC4C,EAAU3C,QAAU1B,KAAKX,MAAMqC,OAC/B2C,EAAUpE,SAAWD,KAAKX,MAAMY,QAChCqE,EAAUE,KAAOxE,KAAKV,MAAMkF,IAC5BF,EAAUG,KAAOzE,KAAKV,MAAMmF,IAC5BH,EAAUxD,MAAMvC,IAAMyB,KAAKV,MAAMwB,MAAMvC,GACvC+F,EAAUxD,MAAMtC,IAAMwB,KAAKV,MAAMwB,MAAMtC,QAElCa,MAAMqF,yDAIG5D,OACV6D,EAAa3E,KAAK4E,eAAe9D,EAAMrC,MAAOqC,EAAMpC,UAC/CqC,SAAWD,IACXvC,EAAI,KACJC,EAAI,QACVqG,UAAWC,MAAM,EAAOhE,MAAO6D,GAAc3E,KAAKX,MAAM0F,mBACxD1F,MAAM2F,cAAcL,0CAGXlG,EAAOC,OACjBuG,SACAC,SAEEC,EAAanF,KAAKoB,uBACJ+D,EAAWzG,OAASyG,EAAW1G,MAChCC,EAASD,IAIfA,MADCuB,KAAKoB,gBAAgB1C,QACDA,KAGpBA,MADDsB,KAAKoB,gBAAgB3C,OACCA,WAIzBwG,QACDC,qDAIgBE,IAEtBA,EAAStE,OAASd,KAAKX,MAAMyB,QAAUsE,EAAStE,OACjDd,KAAKX,MAAMZ,QAAU2G,EAAS3G,OAC9BuB,KAAKX,MAAMX,SAAW0G,EAAS1G,cAE1BiF,UAAUyB,EAAStE,0CAIhBxC,EAASwC,EAAOZ,OAAQmF,yDAAclH,KAC5C2C,EAAMC,SAAU,KACZU,EAAWzB,KAAKsF,kBAAkBxE,EAAOZ,KAEvCqF,SAEAxG,UAAUT,EAAQ+B,OAAO5B,MAAQ,EAAGH,EAAQ+B,OAAO3B,OAAS,KAC5DuB,OAAOD,KAAKX,MAAMY,OAAShB,KAAKC,GAAK,OACrCH,WACJT,EAAQ+B,OAAO5B,MAAQ,GACvBH,EAAQ+B,OAAO3B,OAAS,GAGxBsB,KAAKW,gBACC5B,WACLT,EAAQ+B,OAAO5B,MAAQH,EAAQ+B,OAAO3B,QAAU,GAChDJ,EAAQ+B,OAAO3B,OAASJ,EAAQ+B,OAAO5B,OAAS,KAI7CiD,MAAM2D,EAAaA,KAEnBG,yBAA2B,qBAC3BrE,UACNL,EAAMC,SACNU,EAASlD,EACTkD,EAASjD,EACTiD,EAAShD,MACTgD,EAAS/C,UAGH+G,qDAIO3E,EAAOZ,KAChBY,GAASd,KAAKV,MAAMwB,YAEDd,KAAKM,WAAWJ,YAApCK,OAASC,OAEVqB,EAAe7B,KAAKa,kBAEpBpC,EAAQqC,EAAMrC,MAAQuB,KAAKX,MAAMqC,MACjChD,EAASoC,EAAMpC,OAASsB,KAAKX,MAAMqC,MAErCnD,GAAKsD,EAAatD,EAAIE,EACtBD,GAAKqD,EAAarD,EAAIE,SAEtBsB,KAAKW,iBACFH,KACAD,OAEAA,KACAC,4DAWFlC,KACGiH,SACA7D,MAAMvD,EAAYA,KAClBY,UAAU,EAAG,KACb2G,UAAY,QAAU1F,KAAKX,MAAMsG,MAAMC,MAAM,EAAG,GAAGC,KAAK,KAAO,QAEnElH,EAAeqB,KAAKX,MAAMV,aACxBwG,EAAanF,KAAKoB,kBACWpB,KAAKM,WAAW6E,EAAWjF,iBAAvD4F,OAAaC,OACdrH,EAASyG,EAAW9E,OAAO3B,OAC3BD,EAAQ0G,EAAW9E,OAAO5B,QAGjBQ,KAAKiD,IAAIvD,EAAc,KACvBM,KAAKuC,IAClB7C,EACAF,EAAQ,EAAIqH,EACZpH,EAAS,EAAIqH,KAGPC,cAGN1H,EACAwH,EACAC,EACAtH,EAAsB,EAAdqH,EACRpH,EAAuB,EAAdqH,EACTpH,KAEMC,KAAKH,EAAO,GAAIA,EAAOC,KACvBuH,KAAK,aAELR,kDAGOpC,MACXA,GAAK3F,OAAOwI,OAIdC,sBACGtB,gBACG,KACF,QACA,+CAIF7E,KAAKV,MAAMwF,YACRD,UAAWC,MAAM,SACjBzF,MAAM+G,qDAIE/C,QACXA,GAAK3F,OAAOwI,OACQ,IAApBlG,KAAKV,MAAMwF,UAITuB,EAAiBhD,EAAEiD,cACrBjD,EAAEiD,cAAc,GAAGC,MACnBlD,EAAEmD,QACAC,EAAiBpD,EAAEiD,cACrBjD,EAAEiD,cAAc,GAAGI,MACnBrD,EAAEsD,QAEAC,MACAP,KACAI,GAGFxG,EAASD,KAAKX,MAAMY,aAEd,MACDA,EAAS,EAAIA,EAAS,IAAMA,EAEjCD,KAAKV,MAAMmF,IAAMzE,KAAKV,MAAMkF,GAAI,KAC5BC,EAAKzE,KAAKV,MAAMmF,GAAK4B,EACrB7B,EAAKxE,KAAKV,MAAMkF,GAAKiC,EAErBhI,EAAQuB,KAAKV,MAAMwB,MAAMrC,MAAQuB,KAAKX,MAAMqC,MAC5ChD,EAASsB,KAAKV,MAAMwB,MAAMpC,OAASsB,KAAKX,MAAMqC,QAEvB1B,KAAKa,kBAAzBgG,IAAHtI,EAAauI,IAAHtI,KAEPC,KACAC,MAGHqI,EAAY,mBAAUC,GAAU/H,KAAKC,GAAK,MAC1C+H,EAAMhI,KAAKgI,IAAIF,EAAU9G,IACzBiH,EAAMjI,KAAKiI,IAAIH,EAAU9G,IAGzBzB,EAAIsI,GAASrC,EAAKyC,EAAM1C,EAAKyC,EAK7BxF,MANIoF,EAAQpC,EAAKwC,EAAMzC,EAAK0C,GAOzBzI,EAJa,EAAIuB,KAAKX,MAAMqC,MAAQ1B,KAAK2B,YAIjB,IAC5BnD,EAAIE,EAJc,EAAIsB,KAAKX,MAAMqC,MAAQ1B,KAAK4B,YAIhB,QAG9BvC,MAAM8H,iBAAiB1F,KAEnBX,WACJd,KAAKV,MAAMwB,MACXW,QAIFoD,SAAS+B,QAETvH,MAAM+H,YAAY/D,2CAGTA,MACVA,GAAK3F,OAAOwI,OACdC,iEAGQ9C,yDAAI3F,OAAOwI,WACnBmB,oBACAlB,iBAEE9C,EAAEiE,aAAc,OACOjE,EAAEiE,aAAnBC,IAAAA,MAAOC,IAAAA,MAEXD,GAASA,EAAMtK,aACZoC,MAAMoI,WAAWpE,QACjBhB,cAAckF,EAAM,KAChBC,GAASA,EAAMvK,UACPuK,EAAO,mBAAOE,EAAK/D,UAAUnG,wCAKzC6C,QACJA,OAASA,uCAIR8E,EAAanF,KAAKoB,gBAClBuG,SACGxC,EAAW9E,OAAO5B,aACjB0G,EAAW9E,OAAO3B,cAClBsB,KAAKV,MAAMwF,KAAO,WAAa,QAGnC8C,SACGzC,EAAW9E,OAAO5B,MAAQN,SACzBgH,EAAW9E,OAAO3B,OAASP,aAE9BwJ,EACA3H,KAAKX,MAAMwI,iBAIP7J,EAAa8J,MAAMC,MAAQ/H,KAAKN,kBAChC1B,EAAa8J,MAAMhD,MAAQ9E,KAAKJ,eACtCI,KAAKX,MAAM2I,gBAA0BhK,EAAa8J,MAAMG,MAAQjI,KAAKH,YACtEpC,MAA4BO,EAAa8J,MAAMI,WAAalI,KAAKN,iBAE9DI,4BAAQqI,IAAKnI,KAAKT,WAAeqI,oBA7lBtCxI,EACGgJ,iBACEC,EAAUC,cACTD,EAAUC,aACXD,EAAUE,WACfF,EAAUG,sIACN3K,GAAsBwK,EAAUI,WAAW3K,oBAEzCuK,EAAUE,WAChBF,EAAUC,OACVD,EAAUK,QAAQL,EAAUC,uBAEhBD,EAAUC,aACjBD,EAAUC,cACTD,EAAUC,gBACRD,EAAUM,SACfN,EAAUC,SACVD,EAAUC,eAERD,EAAUK,QAAQL,EAAUC,cAC5BD,EAAUO,mBACJP,EAAUQ,OAAO,GAAI,YAAa,+BAEnCR,EAAUS,mBACPT,EAAUS,mBACVT,EAAUS,kBACXT,EAAUS,mBACTT,EAAUS,eACdT,EAAUS,iBACRT,EAAUS,sBACLT,EAAUS,iBAEfT,EAAUU,MAhCrB3J,EAmCG4J,2BACQ,QACN,SACC,SACA,gBACM,QACP,WACC,WACA,EAAG,EAAG,EAAG"}